{
	"info": {
		"_postman_id": "03c8b09e-43c6-4352-861d-5718bcd5fb11",
		"name": "Flask API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'id' and 'key'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('key');",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"userKey\", jsonData.key);",
							"pm.environment.set(\"userId\", jsonData.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\":\"muzaff\",\n    \"email\":\"muzaffar@gmail.com\",\n    \"real_name\":\"Muzaffar Turak\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/user",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check existing username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response contains error message 'Username already taken'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.equal(\"Username already taken\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\":\"muzaff\",\n    \"email\":\"muzaffar@gmail.com\",\n    \"real_name\":\"Muzaffar Turak\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/user",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Empty Request body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response contains error message 'Bad request'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.equal(\"Bad request\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/user",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit User Metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'id', 'username' , 'email', 'real_name' and 'avatar_icon'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('username');",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData).to.have.property('real_name');",
							"    pm.expect(jsonData).to.have.property('avatar_icon');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\":\"{{userKey}}\",\n    \"username\":\"muzzupdate\",\n    \"email\":\"updatemuz@gmail.com\",\n    \"real_name\":\"Update muzaffar\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/user/{{userId}}/edit",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user",
						"{{userId}}",
						"edit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit User Metadata Incorrect key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response contains error message 'Forbidden'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.equal(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\":\"348756jghkjhkjhskjdf89345\",\n    \"username\":\"muzzupdate\",\n    \"email\":\"updatemuz@gmail.com\",\n    \"real_name\":\"Update muzaffar\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/user/{{userId}}/edit",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user",
						"{{userId}}",
						"edit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit User Metadata Missing key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response contains error message 'Bad request'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.equal(\"Bad request\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\":\"muzzupdate\",\n    \"email\":\"updatemuz@gmail.com\",\n    \"real_name\":\"Update muzaffar\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/user/{{userId}}/edit",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user",
						"{{userId}}",
						"edit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit User Metadata invalid user Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response contains error message 'Not found'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.equal(\"Not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\":\"{{userKey}}\",\n    \"username\":\"muzzupdate\",\n    \"email\":\"updatemuz@gmail.com\",\n    \"real_name\":\"Update muzaffar\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/user/50/edit",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user",
						"50",
						"edit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Display User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.environment.get(\"userId\");",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'id', 'username', 'email', 'real_name' and 'avatar_icon'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('username');",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData).to.have.property('real_name');",
							"    pm.expect(jsonData).to.have.property('avatar_icon');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/user/{{userId}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user with invalid Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response contains error message 'Not found'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.equal(\"Not found\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/user/5",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Post with baseline behavior",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'id', 'key', and 'timestamp'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('key');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"postId1\", jsonData.id);",
							"postman.setEnvironmentVariable(\"postKey1\", jsonData.key);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"msg\": \"Hello, World!\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Missing msg req body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response contains error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"err\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\":\"Hello World\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST invalid msg req body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response contains error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"err\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"msg\": 999999\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user specific post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'id', 'key', and 'timestamp'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('key');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"postId2\", jsonData.id);",
							"postman.setEnvironmentVariable(\"postKey2\", jsonData.key);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_id\":{{userId}},\n    \"user_key\":\"{{userKey}}\",\n    \"msg\":\"Hii From User\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create post with incorrect key/id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response contains error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"err\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_id\":{{userId}},\n    \"user_key\":\"kisaye98roywofhsdkfjaskeiuf456\",\n    \"msg\":\"Hii From User\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new post as a thread",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'id', 'key', 'user_id' and 'timestamp'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('key');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"    pm.expect(jsonData).to.have.property('user_id');",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_id\":{{userId}},\n    \"user_key\":\"{{userKey}}\",\n    \"msg\":\"This is a threaded reply to post 1\",\n    \"parent_post_id\":{{postId2}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'id', 'timestamp', and 'msg'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"    pm.expect(jsonData).to.have.property('msg');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/{{postId1}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"{{postId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read User Specfic post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'id', 'timestamp', and 'msg'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"    pm.expect(jsonData).to.have.property('msg');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/{{postId2}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"{{postId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET non existent post_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response contains error message 'Not Found'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.equal(\"Not found\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/10",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all posts for a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'posts'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('posts');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/posts/user/{{userId}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"posts",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all posts for invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response contains error message 'User not found'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.equal(\"User not found\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/posts/user/56",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"posts",
						"user",
						"56"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all posts for a time range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'results'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('results');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let currentTime = new Date();",
							"let startTime = new Date(currentTime.getTime() - 60 * 60 * 1000); // Subtract 1 hour",
							"let endTime = new Date(currentTime.getTime() + 60 * 60 * 1000); // Add 1 hour",
							"",
							"let startTimeString = startTime.toISOString().replace(\"Z\", \"\");",
							"let endTimeString = endTime.toISOString().replace(\"Z%0A\", \"\");",
							"",
							"pm.environment.set(\"startTime\", startTimeString);",
							"pm.environment.set(\"endTime\", endTimeString);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/posts/search?start_datetime={{startTime}}&end_datetime={{endTime}}\n",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"posts",
						"search"
					],
					"query": [
						{
							"key": "start_datetime",
							"value": "{{startTime}}"
						},
						{
							"key": "end_datetime",
							"value": "{{endTime}}\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid start time fomat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response contains error message 'Invalid start_datetime format'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.equal(\"Invalid start_datetime format\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/posts/search?start_datetime=2023-05-0120:00:00&end_datetime=2023-05-01T21:00:00",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"posts",
						"search"
					],
					"query": [
						{
							"key": "start_datetime",
							"value": "2023-05-0120:00:00"
						},
						{
							"key": "end_datetime",
							"value": "2023-05-01T21:00:00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid end date format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response contains error message 'Invalid end_datetime format'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.equal(\"Invalid end_datetime format\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/posts/search?start_datetime=2023-05-01T20:00:00&end_datetime=2023-05-0121:00:00",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"posts",
						"search"
					],
					"query": [
						{
							"key": "start_datetime",
							"value": "2023-05-01T20:00:00"
						},
						{
							"key": "end_datetime",
							"value": "2023-05-0121:00:00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Normal Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'id', 'key', and 'timestamp'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('key');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/{{postId1}}/delete/{{postKey1}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"{{postId1}}",
						"delete",
						"{{postKey1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete with incorrect key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response contains error message 'Not found'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.equal(\"Not found\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/{{postId1}}/delete/asdwaers84723847jkhjkh",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"{{postId1}}",
						"delete",
						"asdwaers84723847jkhjkh"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User Specific post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'id', 'key', and 'timestamp'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('key');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/{{postId2}}/delete/{{postKey2}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"{{postId2}}",
						"delete",
						"{{postKey2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete with non-existent post_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response contains error message 'Not found'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.equal(\"Not found\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/10/delete/{{postKey}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"10",
						"delete",
						"{{postKey}}"
					]
				}
			},
			"response": []
		}
	]
}